#2020_11_06



8. 그룹화
 group by절 : 특정 컬럼이나 값을 기준으로 행을 묶어서 관리할 때 사용
 	     그룹함수와 함께 사용함으로써 효과적으로 동작

--group by절에서 그룹을 지정하기 위해 사용한 컬럼명은
 select절에서 그룹함수와 함께 사용이 가능.


EX1) 각 직종별 인원수 출력
select job_id, COUNT(*) from employees
group by job_id;

EX2) 각 부서별 급여의 평균과 총 합.
select department_id, round(AVG(salary),2), SUM(salary)
from employees
group by department_id;


Q1) 각 직종별 급여의 최대값과 최소값을 조희

select job_id, MAX(salary), Min(salary)
from employees
group by job_id;

Q2) 사원테이블에서 부서별 급여의 합계, 사원 수, 평균 급여를 출력하되,
급여가 높은 순으로 정렬하시오,.

select department_id, SUM(salary), COUNT(salary), round(AVG(salary),2)
from employees
group by department_id
order by sum(salary) DESC;



EX3) 부서, 직종을 그룹화 한다;
       그룹화된 결과를 부서번호, 직종, 인원수 순으로 출력

select department_id, job_id, COUNT(*)
from employees
group by department_id, job_id
order by department id;


Q3) 부서번호, 직종, 급여의 합계, 직종별 사원수, 직종별 평균급여를 화면에 출력
단, 부서번호가 낮은 순, 급여의 합이 높은 순으로 정렬.

select department_id, job_id, SUM(salary), COUNT(salary), trunc(AVG(salary))
from employees
group by department_id, job_id
order by department_id, SUM(salary) DESC;

------------------------------------------------------------
8-2 그룹화에서의 조건부여
 -- 조건식을 사용할 때, 그룹함수가 필요하다면,
    반드시, having키워드를 사용해야 한다.


EX1) 각 부서의 급여의 최대값, 최소값, 인원수를 출력하자!
       단, 급여의 최대값이 8000이상인 결과만 보여줄 것

select department_id, MAX(salary), Min(salary), COUNT(*)
from employees
group by department_id 
having Max(salary) >= 8000
order by department_id;






Q1) 각 부서별 부서번호, 급여의 합, 평균, 인원수 순으로 출력
단, 급여의 합이 30000이상인 경우만 출력해야 하며
급여의 평균은 소수점 2자리에서 반올림 하시오


select department_id, SUM(salary), round(AVG(salary),2), COUNT(*)
from employees
group by department_id
having sum(salary) >= 30000;

Q2) 각 부서의 인원수가 20명 이상인 부서의 정보를
부서번호, 급여의 합, 급여의 평균, 인원수 순으로 출력
단, 급여의 평균은 소수전 2자리 반올림

select department_id, SUM(salary), round(AVG(salary),2), COUNT(*)
from employees
group by department_id
having COUNT(*) >= 20; 


Q3) 각 부서별 평균급여를 조회하시오.
단, 평균급여가 10000미만인 그룹만 조회해야 하며, 
부서번호가 50이하인 부서만 조회

<< 오류가 나타날 소지가 있는 코드>>
select department_id, round(AVG(salary),2)
from employees 
group by department_id
having avg(salary) < 10000 and department_id <= 50;

why?? : having에서는 group 에서 정의한 컬럼만 사용할 수 있기 때문에 나머지 칼럼을 사용해야 할 때는 오류가 생긴다.


<< 더 나은 코드>>
select department_id, round(AVG(salary),2)
from employees 
where department_id <= 50 
group by department_id
having avg(salary) < 10000;


Q4) 부서별, 직종별로 그룹화 하여 결과를
부서번호, 직종, 인원수 순으로 출력
단, 직종이 'MAN'으로 끝나는 경우만 출력

select department_id, job_id, COUNT(*)
from employees
where job_id LIKE '%MAN'
group by department_id, job_id;




---------------------------------------

9. SubQuery : 특정 SQL문장 안에 또 다른 sql  문장이 포함되어 있는 것.
여러번 DB에 접근할 필요없이 한 번에 데이터를 가져올 수 있다는 장점


[ 서브쿼리를 사용할 수 있는 곳 ]
1) where, having 절
2) select, delete 문의 from절
3) update문의 set 키워드 뒤
4) insert문의 into 키워드 뒤


EX1) 사원테이블에서 이름이 'Michael'이고, 직종이 'MK_MAN'인 사원의 급여보다 많이 받는 사원들의 정보를 사번, 이름, 직종 급여 순으로 출력

1) 이름이 'Michael'이고, 직종이 'MK_MAN'인 사원의 급여 구하기 --13000
select salary from employees
where first_name = 'Michael' and job_id = 'MK_MAN'; 

2) 13000보다 급여가 높은 사원들의 정보
select employee_id, first_name, job_id, salary
from employees
where salary > 13000;

3)  위의 두 쿼리 문을 서브 쿼리를 통해 하나로 합쳐보자
select employee_id, first_name, job_id, salary
from employees
where salary > ( select salary from employees
	         where first_name = 'Michael' and job_id = 'MK_MAN' );






Q1)사번이 150번의 사원의 급여와 같은 급여를 받는 사원들의 정보를
사번, 이름, 급여 순으로 출력

select employee_id,first_name, salary
from employees
where salary = (select salary from employees
		      where employee_id = 150);


Q2) 월급이 회사의 평균웕브 이상인 사람들의 이름과 월급을 조회


select first_name, salary 
from employees
where salary >= ( select AVG(salary) from employees);
	            
Q3) bruce와 같은 부서에 근무하고 있는 사원들의 이름을 출력

select first_name from employees
where department_id = (select department_id from employees
		        where first_name = 'Bruce');


Q4) 각 직종별 사원의 직종명, 평균급여를 조회하되,
평균 급여가 bruce보다 높은 사람들만 출력하라


select job_id, AVG(salary) 
from employees
group by job_id
having AVG(salary) > ( select salary from employees
		      where first_name = 'Bruce');


Q5) 사원테이블에서 last_name이 Kochhar의 급여보다
많이 받는 사원들의 사번, 성, 직종, 급여를 출력

select employee_id,last_name, job_id, salary
from employees
where salary > ( select salary from employees
	         where last_name = 'Kochhar');


Q6) 사원테이블에서 연봉이 가장 적은 사원의 사번, 이름, 급여를 출력하십시오


select employee_id, first_name, salary
from employees
where salary = ( select MIN(salary) from employees); 



Q7) 사원테이블에서 직종이 SA_REP인 사원의 최소급여보다
적으면서 (미만) 직종이 SH_CLERK은 아닌 사원들의 이름, 직종, 급여를 출력


select first_name, job_id, salary
from employees
where salary < (select Min(salary) from employees
	        where job_id = 'SA_REP') and NOT job_id = 'SH_CLERK';


[ NOT 대체 가능한 코드]

1) !=
and job_id != 'SH_CLERK';
2) NOT IN()
and  job_id NOT IN( 'SH_CLERK');
3) <>
and job_id <> 'SH_CLERK';




Q8) 사원테이블에서 100번 부서의 최소 급여보다 많이 받는 (초과) 
다른 모든 부서의 부서번호, 최소 급여를 출력

select department_id, Min(salary)
from employees
group by department_id
having MIN( salary) > ( select Min(salary) from employees
	         where department_id = 100);


Q9) 사원테이블에서 성에 'bat'이라는 단어를 포함하고 있는 사원과
같은 부서에서 근무하는 사원의 전체 정보를 출력

select * from employees
where department_id = ( select department_id from employees
		         where last name like '%Bat%'); 



Q10) 사번이 111번인 사원의 직종과 같고, 사번이 159번인 사원의 급여보다 많이 받는 사원들의 정보를
사번, 이름, 직종, 급여 순으로 출력

select employee_id, first_name, job_id, salary
from employees
where job_id = (select job_id from employees
	        where employee_id = 111)
and salary > ( select salary from employees
	      where employee_id = 159);


Q11) 137번 사원보다 월급이 크거나 같고, 149번의 사원보다는 월급이 작거나 같은
사원의 이름과 월급을 조회하십시오

select first_name, salary
from employees
where salary between (select salary from employees
	                 where employee_id = 137)
and (select salary from employees
       where employee_id = 149);







