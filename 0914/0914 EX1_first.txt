package ex1_first;

public class EX1_First {
	
	public static void main( String[] args ) {
	
		/*
		 #day1 
		 
		  주석 : //-> 컴파일시 컴퓨터가 인식하지 못하는 일종의 메모
		  컴파일 : 컴퓨터가 알아들을 수 있는 언어로 변환 시키는 것 
		 ; : 여기까지 한 줄이라고 인식할 수 있게 하는 것
		 메인 메서드: 프로그램이 실행 될 때 가장 먼저 호출되는 영역
		  
		  [ 기본적인 자바의 출력 형식 ]
		  System.out.println();
		  ()안의 값을 출력함
		  ()안에 사칙연산이 있으면 사칙연산을 하여 출력된다.
		  ()안에 숫자가 아닌 문장이나 단어(문자열을)를 사용하려면, ""가 무조건 필요하다.
		  ()안에 문자열(또는 연산이 불가능한 것들) 사이에 +가 있으면 문장을 이어준다.
		  ex)  System.out.println("안녕"+100+100); 
		  		 => ("안녕100" +100)
		  		 => ("안녕100100)
		  		 
		  ()로 묶으면 가장 먼저 계산
		    자바는 언제나 오른쪽에서 왼쪽으로 읽힘
		  "" 뒤에 있는 애들은 언제나 이어붙이고 왼쪽은 연산함
		   ex)	 System.out.println(10+10+"안녕"+10+10);
		  		 => (20+"안녕"+10+10)
		  		 => ("20안녕" +10 +10
				 => ("20안녕10"+10)
		  		 => ("20안녕1010")
		
		  [ 자료형 (기본 자료형) ]
		   *모든 자료형은 소문자로 시작한다.
		   	
		    논리형: boolean
		    문자형: char(캐릭터)
		    정수형: byte - 1byte  > -128 ~ 127 까지의 값을 넣을 수 있다
		        short - 2byte > -32768 ~ 32767
	              int - 4byte > -21억 ~ 21
		         long - 8byte > -900경 ~ 900경
		    실수형: float  - 4.x byte
		        double  - 8.x byte
		        
		  [ 변수 ]
		   변수 : 특정갑을 저장하기 위한 저장공간
		   
		  < 변수 선언 규칙 >
		   자료형 변수면; <= 선언
		   변수명 = 값; <= 대입
		   자료형 변수명 = 값; <= 선언과 대입을 동시에 (초기화)
		  ex) int b = 3;      		
		   
		  < 변수 이름 짓기 >
		  1) 변수의 이름을 지을 때는 반드시 소문자로 시작한다.
		  2) _를 제외하고 특수문자를 사용하지 않는다.
		  3) 한글로 변수의 이름을 짓지 않는다.
		  4) 합성어로 변수 이름을 지을 경우 카멜 표기법을 사용함
		  
		  
		  < 자료형 > *Ex1_valueType 클래스에 코딩 값 확인 가능
		  
		    논리형 (boolean) : true, false 즉, 참과 거짓의 두가지 값만 저장 가능
		  boolean b;
		  b = true;
		  b = 10; (x) -> 타입이 다른 값을 넣는 것은 불가능하다
		  boolea b; (x) -> 하나의 {}안에서 중복된 이름의 자료형은 또 만들 수 없다.
		 
		 < 문자형 > *Ex1_valueType
		 
		 문자형 (char) : 문자형은 홑따옴표 안에 한 글자만 저장 가능한 자료형
		 char b; (x) -> 타입이 달라도 위에서 사용한 이름이면 사용 불가
		 아스키코드를 사용함
		 
		 <정수형> *Ex2_valueType
		 
		 정수형: 정수단위의 값만 저장 가능한 자료형
		 byte b = 128	<= byte자료형의 최대값을 벗어나므로 오류
		 기본값은 int이기 때문에 long에 int값이 넘어가는 값을 넣었을 때 오류가 생김
		 따라서 long이라는 것을 표시해야 함 (이때,대소문자는 구분하지 않는다)
		 long lo = 2200000000L;
		 
		 <실수형> *Ex2_valueType
		 
		 실수형 : 소수점을 포함하는 값을 저장하기 위한 자료형
		 실수에서의 기본값은 double이다.
		 double은 데이터 용량이 많이 차지하기 때문에 float을 더 자주 씀
		 이때, float안에는 그냥 담을 수가 없기 때문에 값 뒤에 f를 붙여줘야 함
		 
		 float f = 3.14f;
		 double d = 3.14;
		 
		 float이나 double에 정수를 집어넣어도 문제가 되지 않는다.
		 이때, float이나 double에서 정수에 .0을 붙여 실수로 만들어버린다.
		 
		 f = 100; -> 100.0
		 d = 200; -> 200.0
		 
		 
		 
		 */

		
		
		System.out.println( 100 );
		System.out.println( 100+200 );
		System.out.println( 500-100);
		
		System.out.println("안녕하세요");
		System.out.println( "홍길동" + " 안녕" );
		System.out.println("독고길동" + 100);
		System.out.println("안녕"+100+100);
		System.out.println("100 + 50 = "+ (100+50));
		System.out.println(10+10+"안녕"+10+10);
		
		
		
		
		
		
		
		
		
	}//main method (메서드, 메소드)
		
}//class
